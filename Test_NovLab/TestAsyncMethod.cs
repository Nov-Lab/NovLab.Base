// @(h)TestAsyncMethod.cs ver 0.00 ( '24.01.25 Nov-Lab ) 作成開始
// @(h)TestAsyncMethod.cs ver 0.51 ( '24.01.26 Nov-Lab ) ベータ版完成

// @(s)
// 　【AsyncMethod クラステスト】AsyncMethod クラスのテストに使う部品集です。

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Threading;
using System.Reflection;


namespace Test_NovLab
{
    //====================================================================================================
    /// <summary>
    /// 【AsyncMethod クラステスト用・非同期メソッド用引数セット】呼び出し側と非同期メソッド側との間で受け渡す情報を管理します。
    /// </summary>
    /// <remarks>
    /// 補足<br></br>
    /// ・非同期メソッドの操作や、呼び出し側と非同期メソッドとで情報の受け渡しをするために使います。<br></br>
    /// </remarks>
    //====================================================================================================
    public partial class TestAsyncArgs
    {
        //====================================================================================================
        // 内部フィールド
        //====================================================================================================

        /// <summary>
        /// 【インスタンスの排他ロック制御用オブジェクト】
        /// インスタンスの内容を変更する際の排他ロック制御に使用します。
        /// </summary>
        protected object m_instanceLock = new object();


        //====================================================================================================
        // 公開フィールド(非同期メソッドの操作用)
        //====================================================================================================

        // ＜メモ＞CancellationTokenSource 自体がマルチスレッドセーフ
        /// <summary>
        /// 【取り消し要求トークンソース】非同期メソッドへ取り消し要求を伝えるためのトークンソースです。
        /// </summary>
        public CancellationTokenSource ctsCancelRequest = new CancellationTokenSource();

        // ＜メモ＞ManualResetEventSlim 自体がマルチスレッドセーフ
        /// <summary>
        /// 【終了要求シグナル】非同期メソッドへ終了要求を伝えるためのシグナルです。
        /// </summary>
        public ManualResetEventSlim exitRequestSignal = new ManualResetEventSlim(false);

        // ＜メモ＞呼び出し元でのみ変更するので排他ロック制御などは省略
        /// <summary>
        /// 【未ハンドル例外発生要求フラグ】非同期メソッドへハンドルされていない例外のスローを要求するためのフラグです。
        /// </summary>
        public bool requestUnhandledException = false;


        //====================================================================================================
        // 公開フィールドと公開メソッド(情報の受け渡し用)
        //====================================================================================================

        /// <summary>
        /// 【カウント数】
        /// </summary>
        public readonly int numCount = 10;

        /// <summary>
        /// 【メッセージ文字列】null = 新規メッセージなし
        /// </summary>
        /// <remarks>・複数のスレッドで非同期操作するので、排他ロック制御が必要です。</remarks>
        protected string m_asyncMessage = null;


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メッセージ文字列設定】引数セットにメッセージ文字列を設定します。
        /// </summary>
        /// <param name="message">[in ]：メッセージ文字列(null = 新規メッセージなし)</param>
        /// <remarks>
        /// 補足<br></br>
        /// ・マルチスレッドセーフです。<br></br>
        /// </remarks>
        //--------------------------------------------------------------------------------
        public void SetMessage(string message)
        {
            //------------------------------------------------------------
            /// 引数セットにメッセージ文字列を設定する
            //------------------------------------------------------------
            lock (m_instanceLock)
            {                                                           //// クリティカルセクション：インスタンスを排他ロック
                m_asyncMessage = message;                               /////  メッセージ文字列に内容を設定する
            }
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メッセージ文字列取り出し】引数セットからメッセージ文字列を取り出します。
        /// </summary>
        /// <returns>
        /// メッセージ文字列(null = 新規メッセージなし)
        /// </returns>
        /// <remarks>
        /// 補足<br></br>
        /// ・マルチスレッドセーフです。<br></br>
        /// </remarks>
        //--------------------------------------------------------------------------------
        public string PullMessage()
        {
            //------------------------------------------------------------
            /// 引数セットからメッセージ文字列を取り出す
            //------------------------------------------------------------
            lock (m_instanceLock)
            {                                                           //// クリティカルセクション：インスタンスを排他ロック
                var result = m_asyncMessage;                            /////  メッセージ文字列の内容を取得する
                m_asyncMessage = null;                                  /////  メッセージ文字列 = null(新規メッセージなし) にクリアする
                return result;                                          /////  戻り値 = メッセージ文字列の内容 で関数終了
            }
        }

    } // class


    //====================================================================================================
    /// <summary>
    /// 【AsyncMethod クラステスト用・非同期ルーチン】AsyncMethod クラスのテストに用いる非同期メソッド集です。
    /// <code>
    /// 対応機能
    /// ◎ 引数を受け取る(型指定も可能)
    /// ◎ 戻り値を返す(AsyncMethod クラスによりサポート)
    /// ◎ ハンドルされていない例外を呼び出し元でキャッチ(AsyncMethod クラスによりサポート)
    /// 〇 終了要求シグナル(単発型処理では通常は不要なはず(完走するかキャンセルするかなので))
    /// 〇 取り消し要求トークン
    /// ◎ 呼び出し元での完了待機も容易：<c>var result = await AsyncMethod.RunAsync(AsyncMethod, args);</c> のように、関数を呼び出す感覚で実装可能。
    /// 〇 未ハンドル例外のデバッグもしやすい。例外発生時にその場で即座に中断するかどうかを、AsyncMethod.RunAsync のオプションで指定可能。
    /// </code>
    /// </summary>
    //====================================================================================================
    public partial class TestAsyncRoutine
    {
        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【AsyncMethod クラステスト用非同期メソッド】戻り値あり、引数あり版
        /// </summary>
        /// <param name="args">[in ]：引数セット</param>
        /// <returns>
        /// メッセージ文字列
        /// </returns>
        /// <remarks>
        /// ・戻り値なし版：戻り値を無視することで応用可能<br></br>
        /// ・引数なし版：新規生成したダミーの引数セットを渡すことで応用可能<br></br>
        /// </remarks>
        //--------------------------------------------------------------------------------
        public static string AsyncFuncWithParam(TestAsyncArgs args)
        {
            //------------------------------------------------------------
            /// 前準備
            //------------------------------------------------------------
            string methodName = MethodBase.GetCurrentMethod().Name;     //// メソッド名を取得する
            args.SetMessage("Start:" + methodName);                     //// メッセージ文字列 = 処理開始メッセージ


            //------------------------------------------------------------
            /// 処理本体：指定された数だけカウントする
            //------------------------------------------------------------
            try
            {                                                           //// try開始
                for (var counter = 1; counter <= args.numCount; counter++)
                {                                                       /////  １～カウント数まで、カウンターを繰り返す
                    if (args.requestUnhandledException)                 // (ハンドルされていない例外が発生した場合の動作を検証)
                    {                                                   //////   例外要求フラグがセットされている場合
                        args.requestUnhandledException = false;         ///////    例外要求フラグをリセットする(「次のステートメントの設定」でスキップしたときのために)
                        throw new                                       ///////    例外をスローする
                            Exception("Exception by your request.");
                    }

                    var isSignal =
                        args.exitRequestSignal.Wait(1000
                                        , args.ctsCancelRequest.Token); //////   １秒経過するか、終了要求シグナルを受信するまで待機する(取り消しトークンの監視付き)
                    if (isSignal) break;                                //////   終了要求シグナルを受信した場合、繰り返し処理を抜ける

                    args.SetMessage(counter.ToString());                //////   メッセージ文字列 = カウンターメッセージ
                }
            }
            catch (OperationCanceledException)
            {                                                           //// catch：処理キャンセル例外
                args.SetMessage(null);                                  /////  メッセージ文字列 = null(新規メッセージなし) にクリアする
                return "Canceled:" + methodName;                        /////  戻り値 = 処理キャンセルメッセージ で関数終了
            }


            //------------------------------------------------------------
            /// 後始末
            //------------------------------------------------------------
            args.SetMessage(null);                                      //// メッセージ文字列 = null(新規メッセージなし) にクリアする
            return "End:" + methodName;                                 //// 戻り値 = 処理終了メッセージ で関数終了
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【AsyncMethod クラステスト用非同期メソッド】戻り値なし、引数なし版
        /// </summary>
        //--------------------------------------------------------------------------------
        public static void AsyncActionNonParam() => AsyncFuncWithParam(new TestAsyncArgs());


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【AsyncMethod クラステスト用非同期メソッド】戻り値なし、引数あり版
        /// </summary>
        /// <param name="args">[in ]：引数セット</param>
        //--------------------------------------------------------------------------------
        public static void AsyncActionWithParam(TestAsyncArgs args) => AsyncFuncWithParam(args);


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【AsyncMethod クラステスト用非同期メソッド】戻り値あり、引数なし版
        /// </summary>
        /// <returns>
        /// メッセージ文字列
        /// </returns>
        //--------------------------------------------------------------------------------
        public static string AsyncFuncNonParam() => AsyncFuncWithParam(new TestAsyncArgs());

    } // class

} // namespace
