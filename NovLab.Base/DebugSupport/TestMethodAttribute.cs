// @(h)TestMethodAttribute.cs ver 0.00 ( '22.04.22 Nov-Lab ) 作成開始
// @(h)TestMethodAttribute.cs ver 0.51 ( '22.04.22 Nov-Lab ) ベータ版完成
// @(h)TestMethodAttribute.cs ver 0.51a( '22.05.14 Nov-Lab ) 微修正  ：AutoTestMethodAttribute にコンストラクターを追加した
// @(h)TestMethodAttribute.cs ver 0.51b( '22.05.19 Nov-Lab ) その他  ：クラスの派生構造を整理した。機能変更なし。
// @(h)TestMethodAttribute.cs ver 0.51c( '22.05.25 Nov-Lab ) その他  ：コメント整理

// @(s)
// 　【テスト用メソッド属性】メソッドをテスト用メソッドとしてマークし、テスト用プロジェクトが自動的に認識できるようにします。

using System;
using System.Diagnostics;
using System.Reflection;
using System.Collections.Generic;


namespace NovLab.DebugSupport
{
    //====================================================================================================
    /// <summary>
    /// 【テスト用メソッド基底属性】メソッドをテスト用メソッドとしてマークし、テスト用プロジェクトが自動的に認識できるようにします。
    /// </summary>
    /// <remarks>
    /// 補足<br></br>
    /// ・DEBUGビルドでのみ有効な属性です。<br></br>
    /// ・派生クラスで共通の定義を提供するための抽象基底クラスです。<br></br>
    /// </remarks>
    //====================================================================================================
    [Conditional("DEBUG")]                      // DEBUG ビルドでのみ有効
    [AttributeUsage(AttributeTargets.Method)]   // 属性適用対象 = メソッド
    public abstract class BaseTestMethodAttribute : Attribute
    {
        //====================================================================================================
        // 公開フィールド
        //====================================================================================================
        /// <summary>
        /// 【表示名(読み取り専用)】テスト用メソッドの表示名です。[null = 未指定]
        /// </summary>
        public readonly string displayText;


        //====================================================================================================
        // コンストラクターと公開メソッド
        //====================================================================================================
        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【テスト用メソッド属性】メソッドをテスト用メソッドとしてマークし、テスト用プロジェクトが自動的に認識できるようにします。
        /// </summary>
        /// <param name="displayText">[in ]：表示名[null = 未指定]</param>
        //--------------------------------------------------------------------------------
        public BaseTestMethodAttribute(string displayText = null)
        {
            this.displayText = displayText;
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【呼び出し規約チェック】テスト用メソッドの呼び出し規約に適合しているかどうかをチェックし、違反がある場合は例外をスローします。
        /// </summary>
        /// <param name="methodInfo">[in ]：メソッド情報</param>
        /// <remarks>
        /// 補足<br></br>
        /// ・テスト用メソッドの規約は、派生クラスによって異なります。<br></br>
        /// </remarks>
        //--------------------------------------------------------------------------------
        public abstract void CheckRegulation(MethodInfo methodInfo);
    }


    //====================================================================================================
    /// <summary>
    /// 【手動テスト用メソッド属性】メソッドを手動テスト用メソッドとしてマークし、テスト用プロジェクトが自動的に認識できるようにします。
    /// </summary>
    /// <remarks>
    /// 補足<br></br>
    /// ・DEBUGビルドでのみ有効な属性です。<br></br>
    /// ・手動テスト用メソッドは、テスト結果の目視確認が必要なテストです。
    ///   メソッドのテストを行い、デバッグ出力や画面表示の内容を目視確認します。<br></br>
    /// </remarks>
    //====================================================================================================
    [Conditional("DEBUG")]                      // DEBUG ビルドでのみ有効
    [AttributeUsage(AttributeTargets.Method)]   // 属性適用対象 = メソッド
    public class ManualTestMethodAttribute : BaseTestMethodAttribute
    {
        //====================================================================================================
        // コンストラクターと公開メソッド
        //====================================================================================================
        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【テスト用メソッド属性】メソッドを手動テスト用メソッドとしてマークし、テスト用プロジェクトが自動的に認識できるようにします。
        /// </summary>
        /// <param name="displayText">[in ]：表示名[null = 未指定]</param>
        //--------------------------------------------------------------------------------
        public ManualTestMethodAttribute(string displayText = null) : base(displayText) { }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【呼び出し規約チェック】手動テスト用メソッドの呼び出し規約に適合しているかどうかをチェックし、違反がある場合は例外をスローします。
        /// </summary>
        /// <param name="methodInfo">[in ]：メソッド情報</param>
        /// <remarks>
        /// 手動テスト用メソッドの規約<br></br>
        /// <code>
        /// ・修飾子：public な static メソッドであること
        /// ・引数  ：引数を持たないこと
        /// ・戻り値：制約なし
        /// </code>
        /// </remarks>
        //--------------------------------------------------------------------------------
        public override void CheckRegulation(MethodInfo methodInfo)
        {
            //------------------------------------------------------------
            /// テスト用メソッドの規約に適合しているかどうかをチェックする
            //------------------------------------------------------------
            //----------------------------------------
            // メソッドの修飾子をチェック
            //----------------------------------------
            if ((methodInfo.IsPublic && methodInfo.IsStatic) == false)
            {                                                           //// public な static メソッドでない場合
                throw new ArgumentException(                            /////  規約違反例外をスローする
                    "public な static メソッドでない:" + methodInfo.XGetName());
            }


            //----------------------------------------
            // 引数をチェック
            //----------------------------------------
            var paramInfos = methodInfo.GetParameters();                //// メソッドのパラメーター情報配列を取得する
            if (paramInfos.Length != 0)
            {                                                           //// パラメーター数 = 0 でない場合
                throw new ArgumentException(                            /////  規約違反例外をスローする
                    "引数なしでない:" + methodInfo.XGetName());
            }
        }


        //====================================================================================================
        // static 公開メソッド
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【手動テスト実施】手動テスト用メソッドを実行します。
        /// </summary>
        /// <param name="methodInfo">[in ]：メソッド情報</param>
        //--------------------------------------------------------------------------------
        public static void Invoke(MethodInfo methodInfo)
        {
            methodInfo.Invoke(null, null);
        }

    }


    //====================================================================================================
    /// <summary>
    /// 【自動テスト用メソッド属性】メソッドを自動テスト用メソッドとしてマークし、テスト用プロジェクトが自動的に認識できるようにします。
    /// </summary>
    /// <remarks>
    /// 補足<br></br>
    /// ・DEBUGビルドでのみ有効な属性です。<br></br>
    /// ・自動テスト用メソッドは、テスト結果を自動的にチェックするテストです。
    ///   メソッドのテストを行い、テスト内容をデバッグ出力し、テスト結果を自動的にチェックしてテスト実行者I/Fに通知します。<br></br>
    /// </remarks>
    //====================================================================================================
    [Conditional("DEBUG")]                      // DEBUG ビルドでのみ有効
    [AttributeUsage(AttributeTargets.Method)]   // 属性適用対象 = メソッド
    public class AutoTestMethodAttribute : BaseTestMethodAttribute
    {
        //====================================================================================================
        // コンストラクターと公開メソッド
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【自動テスト用メソッド属性】メソッドを自動テスト用メソッドとしてマークし、テスト用プロジェクトが自動的に認識できるようにします。
        /// </summary>
        /// <param name="displayText">[in ]：表示名[null = 未指定]</param>
        //--------------------------------------------------------------------------------
        public AutoTestMethodAttribute(string displayText = null) : base(displayText) { }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【呼び出し規約チェック】自動テスト用メソッドの呼び出し規約に適合しているかどうかをチェックし、違反がある場合は例外をスローします。
        /// </summary>
        /// <param name="methodInfo">[in ]：メソッド情報</param>
        /// <remarks>
        /// 自動テスト用メソッドの規約<br></br>
        /// <code>
        /// ・修飾子：public な static メソッドであること
        /// ・引数  ：引数は1つ(IAutoTestExecuter)であること
        /// ・戻り値：制約なし
        /// </code>
        /// </remarks>
        //--------------------------------------------------------------------------------
        public override void CheckRegulation(MethodInfo methodInfo)
        {
#if DEBUG   // DEBUGビルドのみ有効
            //------------------------------------------------------------
            /// 自動テスト用メソッドの規約に適合しているかどうかをチェックする
            //------------------------------------------------------------
            //----------------------------------------
            // メソッドの修飾子をチェック
            //----------------------------------------
            if ((methodInfo.IsPublic && methodInfo.IsStatic) == false)
            {                                                           //// public な static メソッドでない場合
                throw new ArgumentException(                            /////  規約違反例外をスローする
                    "public な static メソッドでない:" + methodInfo.XGetName());
            }

            //----------------------------------------
            // 引数をチェック
            //----------------------------------------
            var paramInfos = methodInfo.GetParameters();                //// メソッドのパラメーター情報配列を取得する
            if (paramInfos.Length != 1)
            {                                                           //// パラメーター数 = 1 でない場合
                throw new ArgumentException("引数が 1 つでない。");     /////  規約違反例外をスローする

            }

            if (typeof(IAutoTestExecuter).IsAssignableFrom(paramInfos[0].ParameterType) == false)
            {                                                           //// 第1引数が IAutoTestExecuter I/F に変換可能な型でない場合
                throw new ArgumentException(                            /////  規約違反例外をスローする
                    "第1引数が " + nameof(IAutoTestExecuter) + " に変換可能でない。");
            }
#endif
        }


        //====================================================================================================
        // static 公開メソッド
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【自動テスト実施】自動テスト用メソッドを実行します。
        /// </summary>
        /// <param name="methodInfo">[in ]：メソッド情報</param>
        /// <param name="ifExecuter">[in ]：自動テスト実行者I/F</param>
        //--------------------------------------------------------------------------------
#if DEBUG   // DEBUGビルドのみ有効
        public static void Invoke(MethodInfo methodInfo, IAutoTestExecuter ifExecuter)
        {
            methodInfo.Invoke(null, new object[] { ifExecuter });
        }
#endif

    }
}
