// @(h)AutoTestResultInfo.cs ver 0.21 ( '24.01.16 Nov-Lab ) その他  ：アルファ版。AutoTest.cs から分離。機能変更なし。
// @(h)AutoTestResultInfo.cs ver 0.21a( '24.01.18 Nov-Lab ) その他  ：コメント整理

// @(s)
// 　【テスト結果情報】テスト用メソッドの実行結果(TResult型の戻り値 または 例外の型情報)を管理します。

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Collections;


#if DEBUG   // DEBUGビルドのみ使用可能
namespace NovLab.DebugSupport
{
    //====================================================================================================
    /// <summary>
    /// 【自動テスト結果種別】自動テストの結果を示します。
    /// </summary>
    /// <remarks>
    /// 補足<br></br>
    /// ・成功 or 失敗 以外の結果を返すパターンに備えて列挙値にしています。<br></br>
    /// </remarks>
    //====================================================================================================
    public enum AutoTestResultKind
    {
        /// <summary>
        /// 【テスト結果：成功】
        /// </summary>
        Succeeded = 0,

        /// <summary>
        /// 【テスト結果：失敗】
        /// </summary>
        Failed = -1,
    }


    //====================================================================================================
    /// <summary>
    /// 【テスト結果情報】テスト用メソッドの実行結果(TResult型の戻り値 または 例外の型情報)を管理します。
    /// </summary>
    /// <typeparam name="TResult">戻り値の型</typeparam>
    /// <remarks>
    /// 補足<br></br>
    /// ・戻り値またはスローされた例外が予想結果と合致するかどうかをチェックするために使用します。<br></br>
    /// </remarks>
    //====================================================================================================
    public partial class AutoTestResultInfo<TResult>
    {
        //====================================================================================================
        // 公開フィールド
        //====================================================================================================

        /// <summary>
        /// 【結果情報値(読み取り専用)】TResult型の戻り値 または 例外の型情報。
        /// </summary>
        public readonly object value;


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【文字列化】このインスタンスの内容を文字列形式に変換します。
        /// </summary>
        /// <returns>文字列形式</returns>
        //--------------------------------------------------------------------------------
        public override string ToString() => value.ToString();


        //====================================================================================================
        // コンストラクター・変換演算子
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【戻り値指定コンストラクター】TResult型の戻り値から結果情報を生成します。
        /// </summary>
        /// <param name="result">       [in ]：戻り値</param>
        //--------------------------------------------------------------------------------
        public AutoTestResultInfo(TResult result) => value = result;


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【例外型情報指定コンストラクター】例外の型情報から結果情報を生成します。
        /// </summary>
        /// <param name="exceptionTypeInfo">[in ]：例外の型情報</param>
        //--------------------------------------------------------------------------------
        public AutoTestResultInfo(Type exceptionTypeInfo) => value = exceptionTypeInfo;


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【変換演算子(戻り値 -> 結果情報)】TResult型の戻り値を、結果情報に変換します。
        /// </summary>
        /// <param name="result">[in ]：戻り値</param>
        //--------------------------------------------------------------------------------
        public static implicit operator AutoTestResultInfo<TResult>(TResult result) => new AutoTestResultInfo<TResult>(result);


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【変換演算子(例外の型情報 -> 結果情報)】例外の型情報を、結果情報に変換します。
        /// </summary>
        /// <param name="exceptionTypeInfo">[in ]：例外の型情報</param>
        //--------------------------------------------------------------------------------
        public static implicit operator AutoTestResultInfo<TResult>(Type exceptionTypeInfo) => new AutoTestResultInfo<TResult>(exceptionTypeInfo);


        //====================================================================================================
        // 公開メソッド
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【一致チェック】２つの結果情報が一致するかどうかをチェックします。
        /// </summary>
        /// <param name="other">[in ]：比較相手</param>
        /// <returns>
        /// チェック結果[true = 一致 / false = 不一致]
        /// </returns>
        /// <remarks>
        /// 補足<br></br>
        /// ・Object.Equals(Object, Object) と混同しないようにあえて名前を変えています。<br></br>
        /// </remarks>
        //--------------------------------------------------------------------------------
        public bool IsEqual(AutoTestResultInfo<TResult> other)
        {
            //------------------------------------------------------------
            /// ２つの結果情報が一致するかどうかをチェックする
            //------------------------------------------------------------
            //----------------------------------------
            // コレクション用
            //----------------------------------------
            if (value is ICollection && other.value is ICollection)
            {                                                           //// 双方ともコレクションI/Fを持つ場合
                return XICollection.IsEqual(value as ICollection,       /////  コレクション一致チェックを行い、その結果を戻り値として関数終了
                                            other.value as ICollection);
            }

            //----------------------------------------
            // その他のオブジェクト用
            //----------------------------------------
            return Equals(value, other.value);                          //// オブジェクト一致チェックを行い、その結果を戻り値として関数終了
        }

    } // class

} // namespace
#endif
