// @(h)MailslotClient.cs ver 0.00 ( '22.03.24 Nov-Lab ) 作成開始
// @(h)MailslotClient.cs ver 0.51 ( '22.03.30 Nov-Lab ) ベータ版完成
// @(h)MailslotClient.cs ver 0.51a( '22.05.24 Nov-Lab ) その他  ：コメント整理

// @(s)
// 　【メールスロットクライアント】メールスロットへのデータの書き込み機能を提供します。

using System;
using System.Runtime.InteropServices;
using Microsoft.Win32.SafeHandles;

using NovLab;
using NovLab.Win32;


namespace NovLab.IO.Mailslot
{
    //====================================================================================================
    /// <summary>
    /// 【メールスロットクライアント】メールスロットへのデータの書き込み機能を提供します。
    /// </summary>
    //====================================================================================================
    public class MailslotClient
    {
        //====================================================================================================
        // 埋め込みリソース(国際化対応する場合はサテライトアセンブリにする)
        //====================================================================================================
        protected const string IDS_MAILSLOT_ALREADY_OPEN = "メールスロットはすでに開いています";


        //====================================================================================================
        // 内部フィールド
        //====================================================================================================
        /// <summary>
        /// 【メールスロット書き込み用ファイルハンドル】メールスロットへの書き込み用ファイルハンドルを保持します。
        /// </summary>
        protected SafeFileHandle m_hFile = null;


        /// <summary>
        /// 【メールスロット名】現在開いているメールスロットの名前です。メールスロットを開いていないときは null です。
        /// </summary>
        protected string m_mailslotName = null;


        //====================================================================================================
        // オープン／クローズ操作
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メールスロットクライアントオープン】メールスロットクライアントを開きます。
        /// </summary>
        /// <param name="mailslotName">[in ]：メールスロット名</param>
        //--------------------------------------------------------------------------------
        public void Open(string mailslotName)
        {
            //------------------------------------------------------------
            /// すでに開いている場合は例外
            //------------------------------------------------------------
            if (IsOpen)
            {                                                           //// すでにメールスロットクライアントを開いている場合
                throw new                                               /////  操作不正例外をスローする
                    InvalidOperationException(IDS_MAILSLOT_ALREADY_OPEN);
            }


            //------------------------------------------------------------
            /// メールスロットクライアントを開く
            //------------------------------------------------------------
            m_hFile = Win32API.CreateFile(mailslotName,
                Win32API.GENERIC_WRITE,
                Win32API.FILE_SHARE_READ | Win32API.FILE_SHARE_WRITE,
                IntPtr.Zero,
                Win32API.OPEN_EXISTING,
                Win32API.FILE_ATTRIBUTE_NORMAL,
                IntPtr.Zero);                                           //// メールスロットクライアントを書き込み用に開いてファイルハンドルを取得する


            //----------------------------------------
            // エラーチェック
            //----------------------------------------
            if (m_hFile.IsInvalid)
            {                                                           //// オープン失敗の場合
                m_hFile = null;                                         /////  メールスロット書き込み用ファイルハンドル = null にクリアする
                Marshal.ThrowExceptionForHR(                            /////  Win32エラーコードを使用して例外をスローする
                    Marshal.GetHRForLastWin32Error());
            }


            m_mailslotName = mailslotName;                              //// メールスロット名を保持する
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メールスロットクライアントクローズ】メールスロットクライアントを閉じます。
        /// </summary>
        //--------------------------------------------------------------------------------
        public void Close()
        {
            //------------------------------------------------------------
            /// メールスロットクライアントを閉じる
            //------------------------------------------------------------
            if (m_hFile != null)
            {                                                           //// メールスロット書き込み用ファイルハンドルを取得してある場合
                if (m_hFile.IsClosed == false)
                {                                                       /////  ファイルハンドルが閉じていない場合
                    m_hFile.Close();                                    //////   ファイルハンドルを閉じる
                }

                m_hFile = null;                                         /////  メールスロット書き込み用ファイルハンドル = null にクリアする
                m_mailslotName = string.Empty;                          /////  メールスロット名 = 空文字列 にクリアする
            }
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メールスロットクライアントオープン状態(読み取り専用)】メールスロットクライアントを開いているかどうかを示す値を取得します。
        /// [true = 開いている / false = 開いていない]
        /// </summary>
        //--------------------------------------------------------------------------------
        public bool IsOpen
        {
            get
            {
                //------------------------------------------------------------
                /// メールスロットクライアントを開いているかどうかを示す値を取得する
                //------------------------------------------------------------
                if (m_hFile == null)
                {                                                           //// メールスロット書き込み用ファイルハンドルを取得していない場合
                    return false;                                           /////  戻り値 = false(開いていない) で関数終了
                }

                if (m_hFile.IsInvalid)
                {                                                           //// メールスロット書き込み用ファイルハンドルが無効な場合
                    return false;                                           /////  戻り値 = false(開いていない) で関数終了
                }

                if (m_hFile.IsClosed)
                {                                                           //// メールスロット書き込み用ファイルハンドルが閉じている場合
                    return false;                                           /////  戻り値 = false(開いていない) で関数終了
                }
                else
                {                                                           //// メールスロット書き込み用ファイルハンドルが開いている場合
                    return true;                                            /////  戻り値 = true(開いている) で関数終了
                }
            }
        }


        //====================================================================================================
        // 書き込み操作
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メールスロット書き込み(バイト配列)】メールスロットにバイト配列を書き込みます。
        /// </summary>
        /// <param name="data">[in ]：バイト配列データ</param>
        //--------------------------------------------------------------------------------
        public void Write(byte[] data)
        {
            //------------------------------------------------------------
            /// メールスロットにバイト配列を書き込む
            //------------------------------------------------------------
            var success = Win32API.WriteFile(m_hFile,
                data,
                (uint)data.Length,
                out uint lpNumberOfBytesWritten,
                IntPtr.Zero);                                           //// メールスロットにバイト配列を書き込む
            if (success == false)
            {                                                           //// 処理失敗の場合
                Marshal.ThrowExceptionForHR(                            /////  Win32エラーコードを使用して例外をスローする
                    Marshal.GetHRForLastWin32Error());
            }
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メールスロット書き込み(文字列)】メールスロットに文字列を書き込みます。
        /// </summary>
        /// <param name="data">[in ]：文字列データ</param>
        //--------------------------------------------------------------------------------
        public void Write(string data)
        {
            //------------------------------------------------------------
            /// メールスロットに文字列を書き込む
            //------------------------------------------------------------
            Write(MailslotBase.ENCODING.GetBytes(data));                //// 文字列データをバイト配列に変換し、メールスロット書き込み(バイト配列)処理を行う
        }

    }
}
