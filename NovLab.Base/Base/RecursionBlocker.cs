// @(h)RecursionBlocker.cs ver 0.00 ( '22.05.01 Nov-Lab ) 作成開始
// @(h)RecursionBlocker.cs ver 1.01 ( '22.05.01 Nov-Lab ) 初版完成
// @(h)RecursionBlocker.cs ver 1.01a( '22.05.25 Nov-Lab ) その他  ：コメント整理

// @(s)
// 　【自己再帰呼び出しブロッカー】自己再帰呼び出しを防止するための仕組みを提供します。

using System;


namespace NovLab
{
    //====================================================================================================
    /// <summary>
    /// 【自己再帰呼び出しブロッカー】自己再帰呼び出しを防止するための仕組みを提供します。
    /// </summary>
    /// <remarks>
    /// ・using ステートメントを使うと簡潔に記述できます。
    ///   使用例は <see cref="DebugStation.DebugStationTraceListener.M_Send(DebugStation.DebugData)"/> を参考にしてください。
    /// </remarks>
    //====================================================================================================
    public class RecursionBlocker : DisposablePattern
    {
        /// <summary>
        /// 【呼び出し回数カウンタへの参照】
        /// </summary>
        protected Referrable<int> m_refCallCounter;


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【自己再帰呼び出しブロッカー】自己再帰呼び出しのブロックを開始します。
        /// </summary>
        /// <param name="callCounter">[in ]：呼び出し回数カウンタ</param>
        //--------------------------------------------------------------------------------
        public RecursionBlocker(Referrable<int> callCounter)
        {
            //------------------------------------------------------------
            /// 自己再帰呼び出しのブロックを開始する
            //------------------------------------------------------------
            m_refCallCounter = callCounter;                             //// 呼び出し回数カウンタへの参照を保持する
            m_refCallCounter.Value++;                                   //// 呼び出し回数をインクリメントする
        }


        //====================================================================================================
        // Dispose-Finalizeパターン(DisposablePattern 抽象メソッドの実装)
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【マネージリソース破棄】自己再帰呼び出しのブロックを終了します。
        /// </summary>
        //--------------------------------------------------------------------------------
        protected override void M_DisposeManagedResource()
        {
            //------------------------------------------------------------
            /// 自己再帰呼び出しのブロックを終了する
            //------------------------------------------------------------
            m_refCallCounter.Value--;                                   //// 呼び出し回数をデクリメントする
            m_refCallCounter = null;                                    //// 呼び出し回数カウンタへの参照を破棄する
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【アンマネージリソース破棄】このクラスはアンマネージリソースを扱いません。
        /// </summary>
        //--------------------------------------------------------------------------------
        protected override void M_DisposeUnmanagedResource() { }

    }
}
