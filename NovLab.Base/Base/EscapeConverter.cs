// @(h)EscapeConverter.cs ver 0.00 ( '22.05.08 Nov-Lab ) 作成開始
// @(h)EscapeConverter.cs ver 0.51 ( '22.05.10 Nov-Lab ) ベータ版完成
// @(h)EscapeConverter.cs ver 0.51a( '22.05.24 Nov-Lab ) その他  ：コメント整理

// @(s)
// 　【エスケープコンバーター】エスケープ対象文字をエスケープシーケンスに変換する機能を提供します。

using System;
using System.Collections.Generic;
using System.Text;


//[-] 保留：エスケープコンバーター。必要になったら Unescape(エスケープ解除)機能を追加する。
//        ：その場合、EscapeConverterの説明は「エスケープ対象文字とエスケープシーケンスの相互変換機能を提供します」とする

namespace NovLab
{
    //====================================================================================================
    /// <summary>
    /// 【エスケープコンバーター】エスケープ対象文字をエスケープシーケンスに変換する機能を提供します。
    /// </summary>
    /// <remarks>
    /// 補足<br></br>
    /// ・オブジェクト主体のメソッド(XString.XEscape, XChar.XEscape)もあります。<br></br>
    /// ・派生クラスを作成すれば、独自の変換ルールに基づくエスケープコンバーターを用意することもできます。<br></br>
    /// </remarks>
    //====================================================================================================
    public abstract class EscapeConverter
    {
        //====================================================================================================
        // static プロパティー
        //====================================================================================================

        /// <summary>
        /// 【C#形式エスケープコンバーター(読み取り専用)】
        /// </summary>
        public static CSharpEscapeConverter CSharp => new CSharpEscapeConverter();

        /// <summary>
        /// 【制御コード文字可視化エスケープコンバーター(読み取り専用)】
        /// </summary>
        public static CcVisualizationEscapeConverter CcVisualization => new CcVisualizationEscapeConverter();


        //====================================================================================================
        // static 公開メソッド
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【正規化】エスケープコンバーターが null の場合は、既定値である CSharp に差し替えます。
        /// </summary>
        /// <param name="escapeConverter">[i/o]：エスケープコンバーター</param>
        //--------------------------------------------------------------------------------
        public static void Normalize(ref EscapeConverter escapeConverter)
        {
            if (escapeConverter == null)
            {
                escapeConverter = CSharp;
            }
        }


        //====================================================================================================
        // 公開メソッド
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【文字エスケープ】エスケープ対象文字をエスケープシーケンスに変換して返します。エスケープ対象外文字はそのまま返します。
        /// </summary>
        /// <param name="sourceChar">[in ]：変換元の文字</param>
        /// <returns>
        /// 変換結果
        /// </returns>
        //--------------------------------------------------------------------------------
        public string Escape(char sourceChar)
        {
            //------------------------------------------------------------
            /// エスケープ情報テーブルにあるエスケープ対象文字をエスケープする
            //------------------------------------------------------------
            var success = M_GetEscapeTable().TryGetValue(
                            sourceChar, out string result);             //// エスケープ情報テーブルから、変換元の文字に対応するエスケープシーケンスを取得試行する
            if (success)
            {                                                           //// 取得成功の場合
                return result;                                          /////  戻り値 = エスケープシーケンス で関数終了
            }


            //------------------------------------------------------------
            /// エスケープ情報テーブルにない制御コード文字をエスケープする
            //------------------------------------------------------------
            if (char.IsControl(sourceChar))
            {                                                           //// 制御コード文字の場合(Unicode 汎用カテゴリ"Cc" U+0000～U+001F、U+007F、U+0080～U+009F)
                return M_EscapeControlChar(sourceChar);                 /////  制御コード文字エスケープ処理を行って戻り値とし、関数終了
            }
            else
            {                                                           //// 制御コード文字でない場合
                return sourceChar.ToString();                           /////  戻り値 = 変換元の文字 で関数終了
            }
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【文字列エスケープ】文字列中のエスケープ対象文字をエスケープします。
        /// </summary>
        /// <param name="sourceStr">[in ]：変換元文字列</param>
        /// <returns>
        /// エスケープ結果文字列
        /// </returns>
        //--------------------------------------------------------------------------------
        public string Escape(string sourceStr)
        {
            //------------------------------------------------------------
            /// 文字列中のエスケープ対象文字をエスケープする
            //------------------------------------------------------------
            var result = new StringBuilder();                           //// エスケープ結果文字列 = 空文字列 に初期化する
            foreach (var chr in sourceStr)
            {                                                           //// 変換元文字列の全文字を繰り返す
                result.Append(Escape(chr));                             /////  文字をエスケープしてエスケープ結果文字列に追加する
            }

            return result.ToString();                                   //// 戻り値 = エスケープ結果文字列 で関数終了
        }


        //====================================================================================================
        // 派生クラスで実装する内部メソッド
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【エスケープ情報テーブル取得】エスケープ情報テーブルを取得します。
        /// </summary>
        /// <returns>
        /// エスケープ情報テーブル[Key = エスケープ対象文字, Value = エスケープシーケンス]
        /// </returns>
        //--------------------------------------------------------------------------------
        protected abstract Dictionary<char, string> M_GetEscapeTable();


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【制御コード文字エスケープ】テーブルにない制御コード文字をエスケープします。
        /// (\U0000～\U001F、\U007F、\U0080～\U009F)
        /// </summary>
        /// <param name="controlChar">[in ]：制御コード文字</param>
        /// <returns>
        /// エスケープシーケンス
        /// </returns>
        /// <remarks>
        /// 補足<br></br>
        /// ・制御コード文字とは、Unicode 汎用カテゴリ"Cc"に分類される U+0000～U+001F、U+007F、U+0080～U+009F の文字です。<br></br>
        /// </remarks>
        //--------------------------------------------------------------------------------
        protected abstract string M_EscapeControlChar(char controlChar);
    }


    //====================================================================================================
    /// <summary>
    /// 【C#形式エスケープコンバーター】C#形式のエスケープコンバーターです。
    /// </summary>
    //====================================================================================================
    public class CSharpEscapeConverter : EscapeConverter
    {
        /// <summary>
        /// 【エスケープ情報テーブル】Key = エスケープ対象文字, Value = エスケープシーケンス
        /// </summary>
        protected static Dictionary<char, string> m_escapeTable = new Dictionary<char, string>()
        {
            { '\'', "\\\'" },  // \'  0x0027  単一引用符
            { '\"', "\\\"" },  // \"  0x0022  二重引用符
            { '\\', "\\\\" },  // \\  0x005C  円記号
            { '\0', "\\0" },   // \0  0x0000  Null文字
            { '\a', "\\a" },   // \a  0x0007  ベル (警告)
            { '\b', "\\b" },   // \b  0x0008  バックスペース
            { '\f', "\\f" },   // \f  0x000C  フォーム フィード
            { '\n', "\\n" },   // \n  0x000A  ライン フィード (改行)
            { '\r', "\\r" },   // \r  0x000D  キャリッジ リターン
            { '\t', "\\t" },   // \t  0x0009  水平タブ
            { '\v', "\\v" },   // \v  0x000B  垂直タブ
        };


        //====================================================================================================
        // 抽象内部メソッドの実装
        //====================================================================================================
        protected override Dictionary<char, string> M_GetEscapeTable() => m_escapeTable;


        protected override string M_EscapeControlChar(char controlChar)
        {
            //------------------------------------------------------------
            /// テーブルにない制御コード文字をエスケープする
            //------------------------------------------------------------
            return "\\u" + ((int)controlChar).ToString("X4");           //// 戻り値 = "\u<nnnn>" で関数終了
        }
    }


    //====================================================================================================
    /// <summary>
    /// 【制御コード文字可視化エスケープコンバーター】
    /// 制御コード文字(Unicode 汎用カテゴリ"Cc")を制御機能用記号(Control Pictures。␀,␍,␊,␡など)に置き換えて可視化するエスケープコンバーターです。
    /// </summary>
    /// <remarks>
    /// <code>
    /// エスケープ対象文字              ：エスケープシーケンス
    /// -----------------------------------------------------------------------------------
    /// C0制御コード文字(U+0000～U+001F)：対応する制御機能用記号(U+2400～U+241F)
    /// DEL文字         (U+007F)        ：対応する制御機能用記号(U+2421)
    /// C1制御コード文字(U+0080～U+009F)：「\u＜nnnn＞」形式のUnicode エスケープ シーケンス
    /// </code>
    /// </remarks>
    //====================================================================================================
    public class CcVisualizationEscapeConverter : EscapeConverter
    {
        /// <summary>
        /// 【エスケープ情報テーブル】
        /// </summary>
        protected static Dictionary<char, string> m_escapeTable = new Dictionary<char, string>()
        {
            { '\u007f', "␡" },  // 0x007F  DEL
        };


        //====================================================================================================
        // 抽象内部メソッドの実装
        //====================================================================================================
        protected override Dictionary<char, string> M_GetEscapeTable() => m_escapeTable;


        protected override string M_EscapeControlChar(char controlChar)
        {
            //------------------------------------------------------------
            /// テーブルにない制御コード文字をエスケープする
            //------------------------------------------------------------
            var utf16Code = (int)controlChar;                           //// 制御コード文字からUTF-16コードを取得する
            if (utf16Code.XIsInRange(0x0000, 0x001f))
            {                                                           //// UTF-16コードが 0x0000～0x001F の範囲内の場合
                utf16Code += 0x2400;                                    /////  制御機能用記号文字コード(0x2400～0x241F)に変換する
                return ((char)utf16Code).ToString();                    /////  戻り値 = 変換結果 で関数終了
            }

            return "\\u" + ((int)controlChar).ToString("X4");           //// 戻り値 = "\u<nnnn>" で関数終了
        }
    }
}
