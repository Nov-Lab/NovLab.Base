// @(h)XEnum.cs ver 0.00 ( '22.04.19 Nov-Lab ) 既存のソースを元に作成開始
// @(h)XEnum.cs ver 0.21 ( '22.04.19 Nov-Lab ) アルファ版完成
// @(h)XEnum.cs ver 0.22 ( '22.05.03 Nov-Lab ) 機能追加：扱い保留としていた XStrMake と XStrParse を有効化した
// @(h)XEnum.cs ver 0.22a( '22.05.25 Nov-Lab ) その他  ：コメント整理

// @(s)
// 　【Enum拡張メソッド】System.Enum クラスに拡張メソッドを追加します。

using System;
using System.Diagnostics;


namespace NovLab
{

    //====================================================================================================
    /// <summary>
    /// 【Enum拡張メソッド】System.Enum クラスに拡張メソッドを追加します。
    /// </summary>
    //====================================================================================================
    public static partial class XEnum
    {
        //====================================================================================================
        // メタデータ操作
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【フィールド情報取得】列挙値からフィールド情報を取得します。
        /// フィールドのメタデータにアクセスする際に使用します。
        /// </summary>
        /// <param name="target">[in ]：列挙値</param>
        /// <returns>
        /// フィールド情報[null = 取得失敗(ありえないはず)]
        /// </returns>
        //--------------------------------------------------------------------------------
        public static System.Reflection.FieldInfo XGetFieldInfo(this Enum target)
        {
            //------------------------------------------------------------
            /// 列挙値からフィールド情報を取得する
            //------------------------------------------------------------
            //----------------------------------------
            // 列挙値から列挙定数名を取得
            //----------------------------------------
            var enumType = target.GetType();                            //// 列挙型の型情報を取得する

            var enumName = Enum.GetName(enumType, target);              //// 列挙値から列挙定数名を取得する
            if (enumName == null)
            {                                                           //// 取得失敗の場合(ありえないはずだが)
                Debug.Fail(target + " is not member of " +
                           enumType.Name);                              /////  エラーメッセージ出力
                return null;                                            /////  戻り値 = null(取得失敗) で関数終了
            }

            //----------------------------------------
            // 列挙定数名からフィールド情報を取得
            //----------------------------------------
            var fieldInfo = enumType.GetField(enumName);                //// 列挙定数名からフィールド情報を取得する
            if (fieldInfo == null)
            {                                                           //// 取得失敗の場合(ありえないはずだが)
                Debug.Fail(enumName + " is not member of " +
                           enumType.Name);                              /////  エラーメッセージ出力
                return null;                                            /////  戻り値 = null(取得失敗) で関数終了
            }

            return fieldInfo;                                           //// 戻り値 = フィールド情報 で関数終了
        }


        //====================================================================================================
        // 属性操作
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【カスタム属性取得】列挙値からカスタム属性を取得します。
        /// 取得失敗時は、必須フラグ = false の場合は null を返し、必須フラグ = true の場合は例外をスローします。
        /// </summary>
        /// <typeparam name="TAttribute">カスタム属性の型</typeparam>
        /// <param name="target">   [in ]：列挙値</param>
        /// <param name="essential">[in ]：必須フラグ</param>
        /// <returns>
        /// カスタム属性[null = 取得失敗]
        /// </returns>
        //--------------------------------------------------------------------------------
        public static TAttribute XGetCustomAttribute<TAttribute>(this Enum target,
                                                                 bool essential = false) where TAttribute : Attribute
        {
            //------------------------------------------------------------
            /// 列挙値からカスタム属性を取得する
            //------------------------------------------------------------
            var fieldInfo = target.XGetFieldInfo();                     //// 列挙値からフィールド情報を取得する
            if (fieldInfo == null)
            {                                                           //// 取得失敗の場合(ありえないはずだが)
                return null;                                            /////  戻り値 = null(取得失敗) で関数終了
            }

            var attr =                                                  //// 指定された型のカスタム属性を取得する
                (TAttribute)Attribute.GetCustomAttribute(fieldInfo, typeof(TAttribute));
            if (essential == true && attr == null)
            {                                                           //// 必須フラグ = true かつ 取得失敗の場合
                throw new ArgumentException(                            /////  引数不正例外をスローする
                    typeof(TAttribute).Name + " not found", target.ToString());
            }

            return attr;                                                //// 戻り値 = 取得したカスタム属性 で関数終了
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【カスタム属性付加チェック】
        /// 列挙値にカスタム属性が付加されているかどうかをチェックします。
        /// </summary>
        /// <typeparam name="TAttribute">カスタム属性の型</typeparam>
        /// <param name="enumValue">[in ]：列挙値</param>
        /// <returns>
        /// チェック結果[true = 付加されている / false = 付加されていない]
        /// </returns>
        //--------------------------------------------------------------------------------
        public static bool XHasAttribute<TAttribute>(this Enum enumValue) where TAttribute : Attribute
        {
            //------------------------------------------------------------
            /// 列挙値にカスタム属性が付加されているかどうかをチェックする
            //------------------------------------------------------------
            var attr = XGetCustomAttribute<TAttribute>(enumValue);      //// 列挙値からカスタム属性を取得する
            if (attr != null)
            {                                                           //// 取得成功の場合
                return true;                                            /////  戻り値 = true(付加されている) で関数終了
            }
            else
            {                                                           //// 取得失敗の場合
                return false;                                           /////  戻り値 = false(付加されていない) で関数終了
            }
        }





#if false   // 扱いを保留中
        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【フルネーム取得】列挙値のフルネーム(＜フルパス列挙体名＞.＜列挙定数名＞)を取得します。
        /// </summary>
        /// <param name="target">[in ]：列挙値</param>
        /// <returns>
        /// フルネーム
        /// </returns>
        //--------------------------------------------------------------------------------
        public static string XGetFullName(this Enum target)
        {
            return target.GetType().ToString() + "." +
                   target.ToString();
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【列挙値取得】バイナリ値に対応する列挙値を取得します。
        /// 列挙体に同じバイナリ値を持つ列挙値が複数定義されている場合は、どの列挙値を返すかは不定です。
        /// </summary>
        /// <param name="enumType">[in ]：列挙体の型情報</param>
        /// <param name="binValue">[in ]：バイナリ値</param>
        /// <returns>
        /// 列挙値(null = 取得失敗)
        /// </returns>
        //--------------------------------------------------------------------------------
        public static object XGetEnumValue(Type enumType, object binValue)
        {
            //------------------------------------------------------------
            /// バイナリ値に対応する列挙値を取得する
            //------------------------------------------------------------
            var enumName = Enum.GetName(enumType, binValue);            //// バイナリ値に対応する列挙定数名を取得する
            if (enumName == null)
            {                                                           //// 取得失敗の場合(対応する列挙値が定義されていない場合)
                return null;                                            /////  戻り値 = null(取得失敗) で関数終了
            }

            return Enum.Parse(enumType, enumName);                      //// 戻り値 = 列挙定数名に対応する列挙値 で関数終了(必ず成功する)
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【有効列挙値チェック】列挙値が有効列挙値であるかどうかをチェックします。
        /// 条件 = EnumIgnore 属性を付加されていないこと。
        /// </summary>
        /// <param name="enumValue">[in ]：列挙値</param>
        /// <returns>
        /// チェック結果[true = 有効列挙値である / false = 有効列挙値でない]
        /// </returns>
        //--------------------------------------------------------------------------------
        public static bool XIsValid(this Enum enumValue)
        {
            //------------------------------------------------------------
            /// 列挙値が有効列挙値であるかどうかをチェックする
            //------------------------------------------------------------
            if (enumValue.XHasAttribute<EnumIgnoreAttribute>())
            {                                                           //// 列挙処理対象外マーク属性が付加されている場合
                return false;                                           /////  戻り値 = false(有効列挙値でない) で関数終了
            }

            return true;                                                //// 上記のチェックをパスした場合、戻り値 = true(有効列挙値である) で関数終了
        }


        // 後で：影響箇所に気を付けながら戻り値を object[] にする
        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【有効列挙値配列取得】
        /// 指定した列挙体内の定数の値の配列を取得します。
        /// EnumIgnore 属性を付加された列挙値は除外します。
        /// </summary>
        /// <typeparam name="TEnum">列挙体の型</typeparam>
        /// <returns>
        /// 有効列挙値配列
        /// </returns>
        /// <remarks>
        /// 戻り値は TEnum[] ではなく object[] にしたほうが柔軟に扱えそう。
        /// </remarks>
        //--------------------------------------------------------------------------------
        public static TEnum[] XGetValidValues<TEnum>() where TEnum : struct, Enum
        {
            //------------------------------------------------------------
            /// 指定した列挙体内の定数の値の配列を取得する(EnumIgnore は除外)
            //------------------------------------------------------------
            var result = new List<TEnum>();                             //// 有効列挙値リストを生成する

            foreach (TEnum enumValue in Enum.GetValues(typeof(TEnum)))
            {                                                           //// 指定された型の列挙体に含まれる列挙値全てを繰り返す
                if ((enumValue).XIsValid() == false)
                {                                                       /////  有効列挙値でない場合
                                                                        //if (enumValue.XHasAttribute<EnumIgnoreAttribute>())
                                                                        //{                                                       /////  列挙処理対象外マーク属性が付加されている場合
                    continue;                                           //////   スキップして次の要素へ
                }

                result.Add(enumValue);                                  /////  有効列挙値リストに追加する
            }

            return result.ToArray();                                    //// 戻り値 = 有効列挙値配列 で関数終了
        }
#endif


        //====================================================================================================
        // 列挙値を文字列形式でシリアル化するためのメソッド群
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【XMLシリアル化用列挙値文字列作成】
        /// 列挙値から列挙値文字列を作成します。<br></br>
        /// ・列挙値 = デフォルト値 の場合、列挙値文字列は null になります。<br></br>
        /// ・デフォルト値を null とする処理が不要な場合は、ToString() で作成します。<br></br>
        /// </summary>
        /// <typeparam name="TEnum">列挙体の型</typeparam>
        /// <param name="target">      [in ]：列挙値</param>
        /// <param name="defaultValue">[in ]：デフォルト値</param>
        /// <returns>
        /// 列挙値文字列(列挙値がデフォルト値の場合は null)
        /// </returns>
        /// <remarks>
        /// 補足<br></br>
        /// ・XStrMake と XStrParse は対称的です。<br></br>
        /// ・追加・変更・削除される可能性のある列挙値や、バイナリ値0を持たない列挙値(TraceEventTypeなど)を
        ///   XMLファイルへシリアル化するために使用します。<br></br>
        /// </remarks>
        //--------------------------------------------------------------------------------
        public static string XStrMake<TEnum>(this TEnum target, TEnum defaultValue) where TEnum : struct, Enum
        {
            //------------------------------------------------------------
            /// 列挙値から列挙値文字列を作成する
            //------------------------------------------------------------
            if (target.Equals(defaultValue))
            {                                                           //// 列挙値 = デフォルト値 の場合
                return null;                                            /////  戻り値 = null で関数終了
            }
            else
            {                                                           //// 列挙値 = デフォルト値 でない場合
                return target.ToString();                               /////  戻り値 = 列挙定数名 で関数終了
            }
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【XMLシリアル化用列挙値文字列解析】
        /// 列挙値文字列から対応する列挙値を取得します。<br></br>
        /// 列挙値文字列が無効な場合(null、空文字列、列挙体に含まれない文字列)の場合はデフォルト値を返します。
        /// </summary>
        /// <typeparam name="TEnum">列挙体の型</typeparam>
        /// <param name="enumName">    [in ]：列挙値文字列</param>
        /// <param name="defaultValue">[in ]：デフォルト値(解析失敗時に返す値)</param>
        /// <returns>
        /// 列挙値
        /// </returns>
        /// <remarks>
        /// 補足<br></br>
        /// ・XStrMake と XStrParse は対称的です。<br></br>
        /// ・追加・変更・削除される可能性のある列挙値や、バイナリ値0を持たない列挙値(TraceEventTypeなど)を
        ///   XMLファイルへシリアル化するために使用します。<br></br>
        /// </remarks>
        //--------------------------------------------------------------------------------
        public static TEnum XStrParse<TEnum>(string enumStr, TEnum defaultValue) where TEnum : struct, Enum
        {
            //------------------------------------------------------------
            /// 列挙値文字列に対応する列挙値を取得する
            //------------------------------------------------------------
            if (string.IsNullOrEmpty(enumStr))
            {                                                           //// 列挙値文字列 = null または 空文字列 の場合
                return defaultValue;                                    /////  戻り値 = デフォルト値 で関数終了
            }

            var success = Enum.TryParse(enumStr, out TEnum enumValue);  //// 列挙値文字列の解析を試行して列挙値を取得する
            if (success)
            {                                                           //// 解析成功の場合
                return enumValue;                                       /////  戻り値 = 列挙値 で関数終了
            }
            else
            {                                                           //// 解析失敗の場合
                return defaultValue;                                    /////  戻り値 = デフォルト値 で関数終了
            }
        }


#if false   // 扱いを保留中
        //====================================================================================================
        // 列挙値リストを文字列形式でシリアル化するためのメソッド群
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【XMLシリアル化用列挙値文字列作成】
        /// 列挙値リストから列挙値文字列リストを作成します。
        /// 列挙値リストが無効(null または 空のリスト)の場合、列挙値文字列リストは null になります。
        /// </summary>
        /// <typeparam name="TEnum">列挙体の型</typeparam>
        /// <param name="enumValues">[in ]：列挙値リスト</param>
        /// <returns>
        /// 列挙値文字列リスト
        /// </returns>
        //--------------------------------------------------------------------------------
        public static List<string> XStrListMake<TEnum>(this List<TEnum> enumValues) where TEnum : struct, Enum
        {
            //------------------------------------------------------------
            /// 列挙値リストから列挙値文字列リストを作成する
            //------------------------------------------------------------
            if (enumValues == null)
            {                                                           //// 列挙値リスト = null の場合
                return null;                                            /////  戻り値 = null で関数終了
            }
            if (enumValues.Count == 0)
            {                                                           //// 列挙値リストの件数 = 0 の場合
                return null;                                            /////  戻り値 = null で関数終了
            }

            var enumStrs = new List<string>();                          //// 列挙値文字列リストを生成する
            foreach (var enumValue in enumValues)
            {                                                           //// 列挙値リストを繰り返す
                enumStrs.Add(enumValue.ToString());                     /////  列挙定数名を列挙値文字列リストに追加する
            }

            return enumStrs;                                            //// 戻り値 = 列挙値文字列リスト で関数終了
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【XMLシリアル化用列挙値文字列リスト解析】
        /// 列挙値文字列リストから列挙値リストを生成します。
        /// 列挙値文字列が無効な要素(null、空文字列、列挙体に含まれない文字列)は無視します。
        /// 列挙値文字列リストが無効(null または 空のリスト)の場合、列挙値リストは null になります。
        /// </summary>
        /// <typeparam name="TEnum">列挙体の型</typeparam>
        /// <param name="enumStrs">[in ]：列挙値文字列リスト</param>
        /// <returns>
        /// 列挙値リスト
        /// </returns>
        //--------------------------------------------------------------------------------
        public static List<TEnum> XStrListParse<TEnum>(List<string> enumStrs) where TEnum : struct, Enum
        {
            //------------------------------------------------------------
            /// 列挙値文字列リストから列挙値リストを生成する
            //------------------------------------------------------------
            if (enumStrs == null)
            {                                                           //// 列挙値文字列リスト = null の場合
                return null;                                            /////  戻り値 = null で関数終了
            }

            if (enumStrs.Count == 0)
            {                                                           //// 列挙値文字列リストの件数 = 0 の場合
                return null;                                            /////  戻り値 = null で関数終了
            }

            var enumValues = new List<TEnum>();                         //// 列挙値リストを生成する
            foreach (var enumStr in enumStrs)
            {                                                           //// 列挙値文字列リストを繰り返す
                var success =
                    Enum.TryParse(enumStr, out TEnum enumValue);        //// 列挙値文字列の解析を試行して列挙値を取得する
                if (success)
                {                                                       //// 解析成功の場合
                    enumValues.Add(enumValue);                          //////   列挙値をリストに追加する
                }
            }

            if (enumValues.Count == 0)
            {                                                           //// 列挙値リストの件数 = 0 の場合(全要素とも解析失敗した場合)
                return null;                                            /////  戻り値 = null で関数終了
            }

            return enumValues;                                          //// 戻り値 = 列挙値リスト で関数終了
        }
#endif
    }


#if false   // 扱いを保留中
    //====================================================================================================
    /// <summary>
    /// 【列挙処理対象外マーク】NONE や INVALID など特殊な意味を持つ列挙値であり、有効列挙値取得などで処理対象外にすることを示します。
    /// </summary>
    /// 属性付加チェック方法 <seealso cref="XEnum.XHasAttribute{TAttr}(Enum)"/>
    //====================================================================================================
    public class EnumIgnoreAttribute : Attribute
    {
    }
#endif



    //====================================================================================================
    /// <summary>
    /// 【文字列形式で保持・シリアル化する列挙値】<br></br>
    /// 文字列形式で保持・シリアル化し、認識できない列挙定数名(後のバージョンで追加された列挙値)があっても例外を発生させずに代替手段でカバーできるようにします。<br></br>
    /// 列挙値で取得・設定する際は、アクセサー経由で変換します。<br></br>
    /// </summary>
    /// <remarks>
    /// ＜補足事項＞この属性クラスはいまのところ機能的役割はありません。<br></br>
    /// ・文字列形式で保持・シリアル化することで、認識できない列挙定数名も、意図的に更新しない限り元の内容を維持する。(*1)<br></br>
    /// ・取り扱いは列挙値で行う。取得・設定時に文字列形式に変換し、文字列形式で保持・シリアル化する。<br></br>
    /// ・列挙値に変換して取得する際、null や認識できない列挙定数名はデフォルト値として取得する。<br></br>
    /// ・列挙値から変換して設定する際、デフォルト値は null文字列に変換し、XMLファイルでは省略されるようにする。<br></br>
    /// <br></br>
    /// *1列挙値で保持し、シリアル化／逆シリアル化のときに文字列型に変換する方法もあるが、
    ///   そのやり方だとこれが実現できず、認識できない列挙定数名はデフォルト値に書き換わってしまう。<br></br>
    /// </remarks>
    //====================================================================================================
    public class EnumStrAttribute : Attribute
    {
        // public enum WeatherKind  // 天候種別
        // {
        //     Shiny,      // 晴天 <- これがデフォルト値とする
        //     Cloudy,     // 曇天
        //     Rainy,      // 雨天
        //     Snowfall,   // 雪   <- 後のバージョンで追加したという想定
        // }
        //
        // ＜このバージョンが "Snowfall" を認識できない場合＞
        // ・XMLファイルからは文字列形式 "Snowfall" のまま読み込む
        // ・バッキングフィールドには文字列形式 "Snowfall" のまま保持する
        // ・列挙値で取得する際は、認識できない列挙定数名なのでデフォルト値(WeatherKind.Shiny)になる
        // ・XMLファイルに保存するときは、バッキングフィールド内の文字列形式 "Snowfall" のまま書き込む
        //
        // ＜列挙値で保持し、シリアル化／逆シリアル化のときに文字列型に変換する方法だと＞
        // ・XMLファイルから読み込む際、認識できない列挙定数名なのでデフォルト値(WeatherKind.Shiny)に書き換わってしまう
        // ・そのまま保存すると、"Snowfall" が "Shiny" に書き換わってしまう
    }

}
