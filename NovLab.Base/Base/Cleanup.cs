// @(h)Cleanup.cs ver 0.00 ( '22.05.05 Nov-Lab ) 作成開始
// @(h)Cleanup.cs ver 1.01 ( '22.05.05 Nov-Lab ) 初版完成
// @(h)Cleanup.cs ver 1.01a( '22.05.18 Nov-Lab ) その他  ：クラス名変更に対応した(ManualTestMethodAttribute)。機能変更なし。

// @(s)
// 　【クリーンアップ機構】using ブロックを利用したクリーンアップ機構を提供します。

using System;
using System.Diagnostics;
using NovLab.DebugSupport;


namespace NovLab
{
    //====================================================================================================
    /// <summary>
    /// 【クリーンアップ機構】using ブロックを利用したクリーンアップ機構を提供します。
    /// </summary>
    /// <remarks>
    /// ▼使用例：using ブロックを抜けるときにクリーンアップメソッドを実行するパターン
    /// <code>
    /// void CleanupProcess() { Debug.Print("後始末"); } // クリーンアップメソッド
    ///
    /// using (new Cleanup(CleanupProcess))
    /// {
    ///     Debug.Print("処理本体開始");
    ///     ：
    ///     Debug.Print("処理本体終了");
    /// }
    /// </code>
    /// ▼使用例：前処理と後処理を対とするパターン
    /// <code>
    /// void PreProcess() { Debug.Print("前処理"); Debug.Indent(); }    // 前処理メソッド
    /// void PostProcess() { Debug.Unindent(); Debug.Print("後処理"); } // 後処理メソッド
    ///
    /// using (new Cleanup(PreProcess, PostProcess))
    /// {
    ///     Debug.Print("処理本体開始");
    ///     ：
    ///     Debug.Print("処理本体終了");
    /// }
    /// </code>
    /// </remarks>
    //====================================================================================================
    public class Cleanup : DisposablePattern
    {
        //====================================================================================================
        // 内部フィールド
        //====================================================================================================

        /// <summary>
        /// 【クリーンアップメソッド(読み取り専用)】using ブロックを抜けるときに実行すべきメソッドです。
        /// </summary>
        protected readonly Action m_cleanUpMethod;


        //====================================================================================================
        // コンストラクター
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【クリーンアップ機構】using ブロックで使用します。using ブロックを抜けるときにクリーンアップメソッドを実行するクリーンアップ機構を生成します。
        /// </summary>
        /// <param name="cleanUpMethod">[in ]：クリーンアップメソッド(using ブロックを抜けるときに実行すべきメソッド)</param>
        //--------------------------------------------------------------------------------
        public Cleanup(Action cleanUpMethod)
        {
            /// クリーンアップメソッドを保持する
            m_cleanUpMethod = cleanUpMethod;
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【クリーンアップ機構】using ブロックで使用します。前処理と後処理を対とするクリーンアップ機構を生成します。
        /// </summary>
        /// <param name="preProcessMethod"> [in ]：前処理メソッド</param>
        /// <param name="postProcessMethod">[in ]：後処理メソッド</param>
        /// <remarks>
        /// ・前処理は即座に実行され、後処理は using ブロックを抜けるときに実行されます。
        /// </remarks>
        //--------------------------------------------------------------------------------
        public Cleanup(Action preProcessMethod, Action postProcessMethod)
        {
            //------------------------------------------------------------
            /// 前処理と後処理を対とするクリーンアップ機構を生成する
            //------------------------------------------------------------
            m_cleanUpMethod = postProcessMethod;                        //// クリーンアップメソッド(後処理メソッド)を保持する
            preProcessMethod();                                         //// 前処理メソッドを実行する
        }


        //====================================================================================================
        // DisposablePattern の実装
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【マネージリソース破棄】using ブロックを抜けるときに呼び出され、クリーンアップメソッドを実行します。
        /// </summary>
        //--------------------------------------------------------------------------------
        protected override void M_DisposeManagedResource()
        {
            /// クリーンアップメソッドを実行する
            m_cleanUpMethod();
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【アンマネージリソース破棄】本クラスではアンマネージリソースは扱いません。
        /// </summary>
        //--------------------------------------------------------------------------------
        protected override void M_DisposeUnmanagedResource() { }


        //====================================================================================================
        // テスト用メソッド
        //====================================================================================================

#if DEBUG
        [ManualTestMethod("Cleanup の使用例①：前処理と後処理を対とするクリーンアップ機構")]
        public static void ZZZ_Cleanup1()
        {
            void PreProcess() { Debug.Print("前処理"); Debug.Indent(); }
            void PostProcess() { Debug.Unindent(); Debug.Print("後処理"); }

            using (new Cleanup(PreProcess, PostProcess))
            {
                Debug.Print("処理本体開始");
                Debug.Print("処理本体終了");
            }
        }
#endif


#if DEBUG
        [ManualTestMethod("Cleanup の使用例②：using ブロックを抜けるときにクリーンアップメソッドを実行するクリーンアップ機構")]
        public static void ZZZ_Cleanup2()
        {
            void CleanupProcess() { Debug.Print("後始末"); }

            using (new Cleanup(CleanupProcess))
            {
                Debug.Print("処理本体開始");
                Debug.Print("処理本体終了");
            }
        }
#endif

    }
}
