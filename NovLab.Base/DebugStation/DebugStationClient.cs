// @(h)DebugStationClient.cs ver 0.00 ( '22.03.25 Nov-Lab ) 作成開始
// @(h)DebugStationClient.cs ver 1.01 ( '22.04.20 Nov-Lab ) 初版完成
// @(h)DebugStationClient.cs ver 1.01a( '22.05.24 Nov-Lab ) その他  ：コメント整理

// @(s)
// 　【デバッグステーションクライアント】デバッグステーションアプリケーションとのデータの送受信機能を提供します。

using System;
using System.Collections.Generic;

using NovLab.IO.Mailslot;
using NovLab.DebugStation.DebugUseBlocker;  // Debug/Traceクラス使用ブロッカー(DebugStationTraceListener の呼び出し先では、Debug クラスと Trace クラスは使用禁止)


namespace NovLab.DebugStation
{
    // ＜メモ＞
    // ・デバッグステーションアプリケーションとのデータの送受信はメールスロットを通して行います。
    // ・デバッグステーションアプリケーションが起動していない場合、あるいは不意に終了された場合にも対応しています。
    //====================================================================================================
    /// <summary>
    /// 【デバッグステーションクライアント】デバッグステーションアプリケーションとのデータの送受信機能を提供します。
    /// </summary>
    /// <remarks>
    /// 関連クラスの使い分け方<br></br>
    /// ・<see cref="NLDebug"/> クラスを使うと、任意の情報メッセージやイベントをデバッグステーションへ送ることができます。<br></br>
    /// ・<see cref="DebugStationTraceListener"/> クラスを使うと、Debug クラスや Trace クラスの出力をデバッグステーションへ送ることができます。<br></br>
    /// ・<see cref="DebugStationClient"/> クラスを直接使うと、複数のデバッグステーションを使い分けることができます。<br></br>
    /// <br></br>
    /// Tips<br></br>
    /// ・複数のクライアントを使い分けることで、特定の情報だけを別のデバッグステーションへ送信することができます。<br></br>
    /// ・NLDebug や DebugStationTraceListener は既定のクライアントを使用します。<br></br>
    /// </remarks>
    //====================================================================================================
    public class DebugStationClient
    {
        //====================================================================================================
        // 既定クライアント操作
        //====================================================================================================
        /// <summary>
        /// 【既定クライアント(読み取り専用)】既定のデバッグステーションクライアントを取得します。[null = 未オープン]
        /// </summary>
        public static DebugStationClient Default { get; protected set; }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【既定クライアントオープン(既定)】既定のデバッグステーションクライアントを開きます。既定のメールスロット名を宛先とします。
        /// </summary>
        /// <returns>
        /// オープンしたデバッグステーションクライアント
        /// </returns>
        //--------------------------------------------------------------------------------
        public static DebugStationClient OpenDefault()
        {
            //------------------------------------------------------------
            /// 既定のデバッグステーションクライアントを開く
            //------------------------------------------------------------
            Default = new DebugStationClient();                         //// 既定の宛先でクライアントを生成し、既定クライアントに設定する
            return Default;                                             //// 戻り値 = 既定クライアント で関数終了
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【既定クライアントオープン(メールスロット名指定)】メールスロット名を指定して、既定のデバッグステーションクライアントを開きます。
        /// </summary>
        /// <param name="mailslotName">[in ]：メールスロット名</param>
        /// <returns>
        /// オープンしたデバッグステーションクライアント
        /// </returns>
        //--------------------------------------------------------------------------------
        public static DebugStationClient OpenDefault(string mailslotName)
        {
            //------------------------------------------------------------
            /// メールスロット名を指定して、既定のデバッグステーションクライアントを開く
            //------------------------------------------------------------
            Default = new DebugStationClient(mailslotName);             //// メールスロット名を指定してクライアントを生成し、既定クライアントに設定する
            return Default;                                             //// 戻り値 = 既定クライアント で関数終了
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【既定クライアント取得】既定のデバッグステーションクライアントを取得します。未オープンの場合は、既定の宛先でオープンします。
        /// </summary>
        /// <returns>
        /// デバッグステーションクライアント
        /// </returns>
        //--------------------------------------------------------------------------------
        public static DebugStationClient GetOrOpenDefault()
        {
            //------------------------------------------------------------
            /// 既定のデバッグステーションクライアントを取得する
            //------------------------------------------------------------
            var client = Default;                                       //// 既定クライアントを取得する
            if (client != null)
            {                                                           //// 取得成功の場合
                return client;                                          /////  戻り値 = 既定クライアント で関数終了
            }
            else
            {                                                           //// 取得失敗の場合(未オープンの場合)
                return OpenDefault();                                   /////  既定クライアントを既定の宛先でオープンして戻り値とし、関数終了
            }
        }


        //====================================================================================================
        // 公開定数
        //====================================================================================================
        // ＜メモ＞デバッグステーションアプリケーションも参照するので公開定数にしています。
        /// <summary>
        /// 【メールスロット名の既定値】
        /// </summary>
        public const string DEFAULT_MAILSLOT_NAME = "\\\\.\\mailslot\\NovLab\\DebugStation";


        //====================================================================================================
        // 内部定数
        //====================================================================================================
        /// <summary>
        /// 【オープン試行間隔(秒)の既定値】
        /// </summary>
        protected const float M_DEFAULT_OPENTRY_INTERVAL_SEC = 1.0f;


        //====================================================================================================
        // 公開プロパティー
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【オープン試行間隔(秒)】
        /// メールスロットのオープンを試行する間隔を秒で指定します。
        /// オープンに失敗した場合、この秒数が経過するまでオープンの試行を停止します。
        /// </summary>
        /// <remarks>
        /// ・過剰なオープン試行を抑止することでパフォーマンス低下を防ぎます。<br></br>
        /// </remarks>
        //--------------------------------------------------------------------------------
        public float OpenTryIntervalSec
        {
            get => bf_openTryIntervalSec;

            set
            {
                if (value < 0)
                {
                    throw new ArgumentOutOfRangeException();
                }

                bf_openTryIntervalSec = value;
            }
        }
        protected float bf_openTryIntervalSec = M_DEFAULT_OPENTRY_INTERVAL_SEC;


        //====================================================================================================
        // 内部フィールド
        //====================================================================================================
        /// <summary>
        /// 【メールスロットクライアント】
        /// </summary>
        protected MailslotClient m_mailslotClient = new MailslotClient();


        /// <summary>
        /// 【メールスロット名】
        /// </summary>
        protected string m_mailslotName = DEFAULT_MAILSLOT_NAME;


        /// <summary>
        /// 【オープン試行再開日時】default = 未試行(必要な状況の場合は即座に試行します)
        /// </summary>
        /// <remarks>
        /// ・過剰なオープン試行を抑止することでパフォーマンス低下を防ぎます。<br></br>
        /// </remarks>
        protected DateTime m_openTryResumeTime = default;


        //====================================================================================================
        // コンストラクター
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【既定のコンストラクター】既定の内容で新しいインスタンスを初期化します。
        /// </summary>
        //--------------------------------------------------------------------------------
        public DebugStationClient()
        {
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【コンストラクター(メールスロット名指定)】メールスロット名を指定して新しいインスタンスを初期化します。
        /// </summary>
        /// <param name="mailslotName">[in ]：メールスロット名</param>
        //--------------------------------------------------------------------------------
        public DebugStationClient(string mailslotName)
        {
            m_mailslotName = mailslotName;
        }


        //====================================================================================================
        // オープン／クローズ操作
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【デバッグステーションクライアントオープン】デバッグステーションクライアントを開きます。
        /// </summary>
        //--------------------------------------------------------------------------------
        public void Open() => m_mailslotClient.Open(m_mailslotName);


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【デバッグステーションクライアントクローズ】デバッグステーションクライアントを閉じます。
        /// </summary>
        //--------------------------------------------------------------------------------
        public void Close() => m_mailslotClient.Close();


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【デバッグステーションクライアントオープン状態(読み取り専用)】デバッグステーションクライアントを開いているかどうかを示す値を取得します。
        /// [true = 開いている / false = 開いていない]
        /// </summary>
        //--------------------------------------------------------------------------------
        public bool IsOpen => m_mailslotClient.IsOpen;


        //====================================================================================================
        // 送信操作
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【デバッグデータ送信】デバッグステーションへデバッグデータを送信します。
        /// </summary>
        /// <param name="debugData">[in ]：デバッグデータ</param>
        //--------------------------------------------------------------------------------
        public void Send(DebugData debugData)
        {
            //------------------------------------------------------------
            /// デバッグステーションへデバッグデータを送信する
            //------------------------------------------------------------
            var success = M_PrepareForSend();                           //// 送信準備処理を行う
            if (success == false)
            {                                                           //// 準備失敗の場合(デバッグステーションが起動されていない場合など)
                return;                                                 /////  関数終了
            }

            var xmlString = debugData.ToXmlString();                    //// デバッグデータからXML文字列を作成する

            try
            {                                                           //// try開始
                m_mailslotClient.Write(xmlString);                      /////  メールスロットにXML文字列を書き込む
            }
            catch (Exception ex)
            {                                                           //// catch：すべての例外(デバッグステーションが終了された場合など)
                DebugX.Print("デバッグデータ送信失敗：" + ex.Message);
                Close();                                                /////  デバッグステーションクライアントを閉じる
            }

        }


        //====================================================================================================
        // 内部メソッド
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【送信準備】デバッグステーションへの送信準備をします。
        /// </summary>
        /// <returns>
        /// 処理結果[true = 準備完了 / false = 準備失敗]
        /// </returns>
        //--------------------------------------------------------------------------------
        protected bool M_PrepareForSend()
        {
            //------------------------------------------------------------
            /// すでに開いてある場合は準備完了を返す
            //------------------------------------------------------------
            if (IsOpen)
            {                                                           //// デバッグステーションクライアントを開いている場合
                return true;                                            /////  戻り値 = true(準備完了) で関数終了
            }


            //------------------------------------------------------------
            /// デバッグステーションへの送信準備をする
            //------------------------------------------------------------
            if (DateTime.Now < m_openTryResumeTime)
            {                                                           //// オープン試行再開日時より前の場合
                DebugX.Print("試行再開日時より前なので試行しない：" +
                    DateTime.Now.ToString("u") + " < " + m_openTryResumeTime.ToString("u"));
                return false;                                           /////  戻り値 = false(準備失敗) で関数終了
            }


            try
            {                                                           //// try開始
                Open();                                                 /////  デバッグステーションクライアントを開く
                m_openTryResumeTime = default;                          /////  オープン試行再開日時 = default(未試行) にリセットする
                return true;                                            /////  戻り値 = true(準備完了) で関数終了
            }
            catch (Exception ex)
            {                                                           //// catch：すべての例外(デバッグステーションが起動されていない場合など)
                m_openTryResumeTime =
                    DateTime.Now.AddSeconds(OpenTryIntervalSec);        /////  オープン試行再開日時 = 現在日時＋オープン試行間隔(秒)
                DebugX.Print("デバッグステーションクライアントオープン失敗：" + ex.Message);
                DebugX.Print("  試行再開日時：" + m_openTryResumeTime.ToString("u"));
                return false;                                           /////  戻り値 = false(準備失敗) で関数終了
            }
        }
    }
}
